#!/bin/sh
# the next line restarts using wish \
exec wish "$0" "$@"

set path $argv0
file lstat $path file_stats
if { [lindex [array get file_stats type] 1] == "link" } {
	set path [file normalize [file join [file dirname $argv0] [file readlink $path]]]
}

::tcl::tm::path add [file dirname $path]
package require git 0
package require widget 0

if { [llength $argv] != 1 } {
	puts "[file tail $argv0] requires exactly one parameter"
	exit 1
}
set file [lindex $argv 0]

panedwindow .window -orient horizontal -showhandle true
scroll listbox .revisions -noxscroll
panedwindow .panel -orient vertical -showhandle true
.window add .revisions .panel -sticky news

scroll text .contents -wrap no -state disabled
frame .info_pane
.panel add .contents .info_pane -sticky news

.window paneconfigure .revisions -stretch never
.window paneconfigure .panel -stretch always
.panel paneconfigure .contents -stretch always
.panel paneconfigure .info_pane -stretch never

label .info_pane.commitLabel -text "Commit: "
text .info_pane.commitValue -height 1 -state disabled
bind .info_pane.commitValue <1> {focus %W}
label .info_pane.filenameLabel -text "Filename: "
text .info_pane.filenameValue -height 1 -state disabled
bind .info_pane.filenameValue <1> {focus %W}
label .info_pane.authorLabel -text "Author: "
text .info_pane.authorValue -height 1 -state disabled
bind .info_pane.authorValue <1> {focus %W}
label .info_pane.dateLabel -text "Date: "
text .info_pane.dateValue -height 1 -state disabled
bind .info_pane.dateValue <1> {focus %W}
label .info_pane.commitSummaryLabel -text "Summary: "
text .info_pane.commitSummaryValue -height 4 -state disabled
bind .info_pane.commitSummaryValue <1> {focus %W}
grid .info_pane.commitLabel .info_pane.commitValue -sticky nw
grid .info_pane.filenameLabel .info_pane.filenameValue -sticky nw
grid .info_pane.authorLabel .info_pane.authorValue -sticky nw
grid .info_pane.dateLabel .info_pane.dateValue -sticky nw
grid .info_pane.commitSummaryLabel .info_pane.commitSummaryValue -sticky nw

pack .window -expand 1 -fill both



set revdict [git::log $file]

foreach {key value} $revdict {
	set time [clock format [dict get $value author-time] -format "%Y-%m-%d %H:%M"]
	.revisions.listbox insert end $time
}

bind .revisions.listbox <<ListboxSelect>> {
	set revname [lindex [dict keys $revdict] [.revisions.listbox curselection]]
	set revinfo [lindex [dict values $revdict] [.revisions.listbox curselection]]
	set file [dict get $revinfo filename]
	event generate .revisions.listbox <<RevisionSelected>> -data [dict create revname $revname filename $file]
}

bind .contents.text <1> {
	focus %W
	set idx [.contents.text index @%x,%y]
	set tags [.contents.text tag names $idx]
	if {[regexp {\mrev#([[:xdigit:]]{40})\M} $tags _ revname]} {
		event generate .contents.text <<RevisionSelected>> -data $revname
	}
}

set uncommitted_changes [string repeat "0" 40]

proc updateRevisionInfo { revision revinfo } {
	setReadOnlyText .info_pane.commitValue $revision
	setReadOnlyText .info_pane.authorValue "[dict get $revinfo author] [dict get $revinfo author-mail]"
	setReadOnlyText .info_pane.dateValue "[clock format [dict get $revinfo author-time]]"
	setReadOnlyText .info_pane.commitSummaryValue "[dict get $revinfo summary]"
	setReadOnlyText .info_pane.filenameValue "[dict get $revinfo filename]"
}

proc clamp { min val max } {
	expr "min( $max , max( $min , $val))"
}

proc mod { v b } {
	set wholes [expr floor(double($v) / double($b))]
	return [expr $v - $wholes * $b]
}

proc rgb { r g b } {
	return [color [expr round(255 * $r)] [expr round(255 * $g)] [expr round(255 * $b)]]
}

proc hsb { h s b } {
	set c [expr $s * $b]
	set hprime [expr $h / 60.0]
	set x [expr $c * (1 - abs([mod $hprime 2] - 1))]
	set red 0
	set green 0
	set blue 0
	if {0 <= $hprime && $hprime < 1} {
		set red $c
		set green $x
	} elseif {1 <= $hprime && $hprime < 2} {
		set red $x
		set green $c
	} elseif {2 <= $hprime && $hprime < 3} {
		set green $c
		set blue $x
	} elseif {3 <= $hprime && $hprime < 4} {
		set green $x
		set blue $c
	} elseif {4 <= $hprime && $hprime < 5} {
		set blue $c
		set red $x
	} elseif {5 <= $hprime && $hprime < 6} {
		set blue $x
		set red $c
	}
	set m [expr $b - $c]
	set red [expr $red + $m]
	set green [expr $green + $m]
	set blue [expr $blue + $m]
	return [rgb $red $green $blue]
}

bind .revisions.listbox <<RevisionSelected>> {
	array unset revision_info

	set oldyview [.contents.text yview]
	set oldmid [expr ([lindex $oldyview 0] + [lindex $oldyview 1]) / 2]
	.contents.text configure -state normal
	.contents.text delete 1.0 end

	git::blame "[dict get %d revname]:[git::cdup][dict get %d filename]" line revname info {
		set lineno [.contents.text count -lines 1.0 end]
		.contents.text insert end "$line\n"
		.contents.text tag add rev#$revname $lineno.0 [expr $lineno + 1].0
		set revision_info($revname) $info
	}

	set revlist [dict keys $revdict]
	if { [llength [array names revision_info -exact $uncommitted_changes]] != 0 } {
		set revlist [linsert $revlist 0 $uncommitted_changes]
	}

	# yellow lines are "new", white lines are "old"
	set thisRevisionName [dict get %d revname]
	set thisRevisionIndex [llength $revlist]
	set hue 60
	for {set i 0} {$i < [llength $revlist]} {incr i 1} {
		set revname [lindex $revlist $i]
		if { $revname eq $thisRevisionName } {
			set thisRevisionIndex $i
		}

		set age [expr max(0, $i - $thisRevisionIndex)]

		set saturation [expr 1.0 / ($age + 1)]
		set value [expr 1 - (1 / ($age + 1)) * 0.1]

		set color [hsb $hue $saturation $value]
		.contents.text tag configure rev#$revname -background $color

		set isSelected [expr $age == 0]
		.contents.text tag configure rev#$revname -underline $isSelected
	}
	.contents.text tag raise sel

	.contents.text configure -state disabled

	set span [expr [lindex $oldyview 1] - [lindex $oldyview 0]]
	set top [expr $oldmid - $span / 2]
	.contents.text yview moveto $top

	updateRevisionInfo [dict get %d revname] [dict get $revdict [dict get %d revname]]
}

bind .contents.text <<RevisionSelected>> {
	updateRevisionInfo %d $revision_info(%d)
}

focus .revisions.listbox

.revisions.listbox selection set 0
# For whatever reason, the above line doesn't actually fire selectionlisteners.
event generate .revisions.listbox <<ListboxSelect>>

wm title . "git chrono: $file"
